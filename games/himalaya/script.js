/* Generated by the Nim Compiler v1.4.8 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1214621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI5655232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5910011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2355020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10438015 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI10438202 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9700015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1214408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1208015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1214723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1214617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1214649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214649.node = NNI1214649;
var NNI1214619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214619.node = NNI1214619;
NTI1214723.base = NTI1214617;
NTI1214728.base = NTI1214617;
var NNI1214617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1214723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1208015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1208013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1208013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1214728, name: "up", sons: null}]};
NTI1214617.node = NNI1214617;
var NNI1214408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214408.node = NNI1214408;
NTI1214617.base = NTI1214408;
NTI1214619.base = NTI1214617;
NTI1214649.base = NTI1214619;
NTI9700015.base = NTI1208013;
var NNI1214637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214637.node = NNI1214637;
var NNI1214633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214633.node = NNI1214633;
NTI1214633.base = NTI1214619;
NTI1214637.base = NTI1214633;
var NNI1214653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214653.node = NNI1214653;
NTI1214653.base = NTI1214619;
var NNI1214641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214641.node = NNI1214641;
NTI1214641.base = NTI1214619;
var NNI10438202 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI10438015, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI10438015, name: "a1", sons: null}]};
NTI10438202.node = NNI10438202;
var NNI2355020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1208044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1208044, name: "b", sons: null}]};
NTI2355020.node = NNI2355020;
var NNI1214635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214635.node = NNI1214635;
NTI1214635.base = NTI1214633;
var NNI5910011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5655232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1208044, name: "b", sons: null}]};
NTI5910011.node = NNI5910011;
var NNI1214643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214643.node = NNI1214643;
var NNI1214621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214621.node = NNI1214621;
NTI1214621.base = NTI1214617;
NTI1214643.base = NTI1214621;
function toJSStr(s_1475096) {
                    var Tmp5;
            var Tmp7;

  var result_1475097 = null;

    var res_1475170 = newSeq_1475128((s_1475096).length);
    var i_1475172 = 0;
    var j_1475174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1475172 < (s_1475096).length)) break L2;
          var c_1475175 = s_1475096[i_1475172];
          if ((c_1475175 < 128)) {
          res_1475170[j_1475174] = String.fromCharCode(c_1475175);
          i_1475172 += 1;
          }
          else {
            var helper_1475198 = newSeq_1475128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1475199 = c_1475175.toString(16);
                  if ((((code_1475199) == null ? 0 : (code_1475199).length) == 1)) {
                  helper_1475198.push("%0");;
                  }
                  else {
                  helper_1475198.push("%");;
                  }
                  
                  helper_1475198.push(code_1475199);;
                  i_1475172 += 1;
                    if (((s_1475096).length <= i_1475172)) Tmp5 = true; else {                      Tmp5 = (s_1475096[i_1475172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1475175 = s_1475096[i_1475172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1475170[j_1475174] = decodeURIComponent(helper_1475198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1475170[j_1475174] = helper_1475198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1475174 += 1;
        }
    } while(false);
    if (res_1475170.length < j_1475174) { for (var i=res_1475170.length;i<j_1475174;++i) res_1475170.push(null); }
               else { res_1475170.length = j_1475174; };
    result_1475097 = res_1475170.join("");

  return result_1475097;

}
function makeNimstrLit(c_1475062) {
      var ln = c_1475062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1475062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_1475079) {
      var ln = c_1475079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1475079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1475079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1490023, src_1490024, ti_1490025) {
  var result_1495219 = null;

    switch (ti_1490025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1485401(ti_1490025))) {
      result_1495219 = src_1490024;
      }
      else {
        result_1495219 = [src_1490024[0], src_1490024[1]];
      }
      
      break;
    case 19:
            if (dest_1490023 === null || dest_1490023 === undefined) {
        dest_1490023 = {};
      }
      else {
        for (var key in dest_1490023) { delete dest_1490023[key]; }
      }
      for (var key in src_1490024) { dest_1490023[key] = src_1490024[key]; }
      result_1495219 = dest_1490023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1490025.base == null))) {
      result_1495219 = nimCopy(dest_1490023, src_1490024, ti_1490025.base);
      }
      else {
      if ((ti_1490025.kind == 17)) {
      result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {m_type: ti_1490025} : dest_1490023;
      }
      else {
        result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {} : dest_1490023;
      }
      }
      nimCopyAux(result_1495219, src_1490024, ti_1490025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1490024 === null) {
        result_1495219 = null;
      }
      else {
        if (dest_1490023 === null || dest_1490023 === undefined) {
          dest_1490023 = new Array(src_1490024.length);
        }
        else {
          dest_1490023.length = src_1490024.length;
        }
        result_1495219 = dest_1490023;
        for (var i = 0; i < src_1490024.length; ++i) {
          result_1495219[i] = nimCopy(result_1495219[i], src_1490024[i], ti_1490025.base);
        }
      }
    
      break;
    case 28:
            if (src_1490024 !== null) {
        result_1495219 = src_1490024.slice(0);
      }
    
      break;
    default: 
      result_1495219 = src_1490024;
      break;
    }

  return result_1495219;

}
function raiseException(e_1440218, ename_1440219) {
    e_1440218.name = ename_1440219;
    if ((excHandler == 0)) {
    unhandledException(e_1440218);
    }
    
    throw e_1440218;

  
}
function chckIndx(i_1500086, a_1500087, b_1500088) {
      var Tmp1;

  var result_1500089 = 0;

  BeforeRet: do {
      if (!(a_1500087 <= i_1500086)) Tmp1 = false; else {        Tmp1 = (i_1500086 <= b_1500088);      }    if (Tmp1) {
    result_1500089 = i_1500086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1500086, a_1500087, b_1500088);
    }
    
  } while (false);

  return result_1500089;

}
function addInt(a_1480419, b_1480420) {
        var result = a_1480419 + b_1480420;
    checkOverflowInt(result);
    return result;
  

  
}
function nimMax(a_1480821, b_1480822) {
    var Tmp1;

  var result_1480823 = 0;

  BeforeRet: do {
    if ((b_1480822 <= a_1480821)) {
    Tmp1 = a_1480821;
    }
    else {
    Tmp1 = b_1480822;
    }
    
    result_1480823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1480823;

}
function subInt(a_1480437, b_1480438) {
        var result = a_1480437 - b_1480438;
    checkOverflowInt(result);
    return result;
  

  
}
function nimMin(a_1480803, b_1480804) {
    var Tmp1;

  var result_1480805 = 0;

  BeforeRet: do {
    if ((a_1480803 <= b_1480804)) {
    Tmp1 = a_1480803;
    }
    else {
    Tmp1 = b_1480804;
    }
    
    result_1480805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1480805;

}
function mnewString(len_1480044) {
        return new Array(len_1480044);
  

  
}
function chckRange(i_1505016, a_1505017, b_1505018) {
      var Tmp1;

  var result_1505019 = 0;

  BeforeRet: do {
      if (!(a_1505017 <= i_1505016)) Tmp1 = false; else {        Tmp1 = (i_1505016 <= b_1505018);      }    if (Tmp1) {
    result_1505019 = i_1505016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1505019;

}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_1480473, b_1480474) {
        if (b_1480474 == 0) raiseDivByZero();
    if (b_1480474 == -1 && a_1480473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1480473 / b_1480474);
  

  
}
function mulInt(a_1480455, b_1480456) {
        var result = a_1480455 * b_1480456;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function modInt(a_1480491, b_1480492) {
        if (b_1480492 == 0) raiseDivByZero();
    if (b_1480492 == -1 && a_1480491 == 2147483647) raiseOverflow();
    return Math.trunc(a_1480491 % b_1480492);
  

  
}
function nimCharToStr(x_1395674) {
  var result_1395675 = [];

    result_1395675 = nimCopy(null, mnewString(1), NTI1208013);
    result_1395675[0] = x_1395674;

  return result_1395675;

}
function addChar(x_1525031, c_1525032) {
    x_1525031.push(c_1525032);

  
}
function nimFloatToString(a_1480649) {
  var result_1480650 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_1480649)) result_1480650 =  a_1480649+".0"
    else {
      result_1480650 = a_1480649+""
      if(nimOnlyDigitsOrMinus(result_1480650)){
        result_1480650 = a_1480649+".0"
      }
    }
  

  return result_1480650;

}
var ConstSet9 = setConstr(46, 44);
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var state_10438205 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_11090231 === undefined) {
  utcInstance_11090231 = [null];
}
if (globalThis.localInstance_11090232 === undefined) {
  localInstance_11090232 = [null];
}
function newSeq_1475128(len_1475131) {
  var result_1475133 = [];

    result_1475133 = new Array(len_1475131); for (var i=0;i<len_1475131;++i) {result_1475133[i]=null;}
  return result_1475133;

}
function getId_10436020(id_10436022) {
  var result_10436023 = null;

    result_10436023 = document.getElementById(toJSStr(id_10436022));

  return result_10436023;

}
function isFatPointer_1485401(ti_1485403) {
  var result_1485404 = false;

  BeforeRet: do {
    result_1485404 = !((ConstSet1[ti_1485403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1485404;

}
function nimCopyAux(dest_1490028, src_1490029, n_1490031) {
    switch (n_1490031.kind) {
    case 0:
      break;
    case 1:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1490031.sons.length; i++) {
      nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i]);
    }
    
      break;
    case 3:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
      for (var i = 0; i < n_1490031.sons.length; ++i) {
        nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1377211(x_1377214, x_1377214_Idx, y_1377215) {
          if (x_1377214[x_1377214_Idx] === null) { x_1377214[x_1377214_Idx] = []; }
      var off = x_1377214[x_1377214_Idx].length;
      x_1377214[x_1377214_Idx].length += y_1377215.length;
      for (var i = 0; i < y_1377215.length; ++i) {
        x_1377214[x_1377214_Idx][off+i] = y_1377215.charCodeAt(i);
      }
    

  
}
function unhandledException(e_1435059) {
    var buf_1435060 = [[]];
    if (!(((e_1435059.message).length == 0))) {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1435060[0].push.apply(buf_1435060[0], e_1435059.message);;
    }
    else {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit(" ["));;
    add_1377211(buf_1435060, 0, e_1435059.name);
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1440201 = toJSStr(buf_1435060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1440201);
  }
  else {
    throw cbuf_1440201;
  }
  

  
}
function raiseIndexError(i_1460047, a_1460048, b_1460049) {
    var Tmp1;

    if ((b_1460049 < a_1460048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1460047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1460048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1460049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1208013), parent: null, m_type: NTI1214649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1214637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1480403) {
        if (a_1480403 > 2147483647 || a_1480403 < -2147483648) raiseOverflow();
  

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1214653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function substr_1591022(s_1591024, first_1591025, last_1591026) {
  var result_1591027 = [];

    var first_1591028 = nimMax(first_1591025, 0);
    var L_1591030 = nimMax(addInt(subInt(nimMin(last_1591026, (s_1591024).length - 1), first_1591028), 1), 0);
    result_1591027 = nimCopy(null, mnewString(chckRange(L_1591030, 0, 2147483647)), NTI1208013);
    L1: do {
      var i_1591039 = 0;
      var colontmp__11840175 = 0;
      colontmp__11840175 = subInt(L_1591030, 1);
      var res_11840176 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11840176 <= colontmp__11840175)) break L3;
            i_1591039 = res_11840176;
            result_1591027[chckIndx(i_1591039, 0, (result_1591027).length-1)] = s_1591024[chckIndx(addInt(i_1591039, first_1591028), 0, (s_1591024).length-1)];
            res_11840176 = addInt(res_11840176, 1);
          }
      } while(false);
    } while(false);

  return result_1591027;

}
function nsuSplitChar(s_9695034, sep_9695035, maxsplit_9695036) {
  var result_9695038 = [];

    result_9695038 = nimCopy(null, [], NTI9700015);
    L1: do {
      var xHEX60gensym59_9700016 = [];
      var lastHEX60gensym26_11840168 = 0;
      var splitsHEX60gensym26_11840169 = maxsplit_9695036;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym26_11840168 <= (s_9695034).length)) break L3;
            var firstHEX60gensym26_11840171 = lastHEX60gensym26_11840168;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym26_11840168 < (s_9695034).length) && !((s_9695034[chckIndx(lastHEX60gensym26_11840168, 0, (s_9695034).length-1)] == sep_9695035)))) break L5;
                  lastHEX60gensym26_11840168 = addInt(lastHEX60gensym26_11840168, 1);
                }
            } while(false);
            if ((splitsHEX60gensym26_11840169 == 0)) {
            lastHEX60gensym26_11840168 = (s_9695034).length;
            }
            
            xHEX60gensym59_9700016 = substr_1591022(s_9695034, firstHEX60gensym26_11840171, subInt(lastHEX60gensym26_11840168, 1));
            var Tmp6 = nimCopy(null, xHEX60gensym59_9700016, NTI1208013);
            result_9695038.push(Tmp6);;
            if ((splitsHEX60gensym26_11840169 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym26_11840169 = subInt(splitsHEX60gensym26_11840169, 1);
            lastHEX60gensym26_11840168 = addInt(lastHEX60gensym26_11840168, 1);
          }
      } while(false);
    } while(false);

  return result_9695038;

}
function make_10436166(kind_10436168, properties_10436170) {
  var result_10436171 = null;

    var element_10436172 = document.createElement(toJSStr(kind_10436168));
    L1: do {
      var property_10436179 = null;
      var property_10436179_Idx = 0;
      var i_11840154 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11840154 < (properties_10436170).length)) break L3;
            property_10436179 = properties_10436170; property_10436179_Idx = chckIndx(i_11840154, 0, (properties_10436170).length-1);
            var p_10436180 = nsuSplitChar(property_10436179[property_10436179_Idx], 61, -1);
            switch (toJSStr(p_10436180[chckIndx(0, 0, (p_10436180).length-1)])) {
            case "class":
              element_10436172.className = toJSStr(p_10436180[chckIndx(1, 0, (p_10436180).length-1)]);
              break;
            case "id":
              element_10436172.id = toJSStr(p_10436180[chckIndx(1, 0, (p_10436180).length-1)]);
              break;
            case "text":
              element_10436172.innerHTML = toJSStr(p_10436180[chckIndx(1, 0, (p_10436180).length-1)]);
              break;
            default: 
              break;
            }
            i_11840154 = addInt(i_11840154, 1);
          }
      } while(false);
    } while(false);
    result_10436171 = element_10436172;

  return result_10436171;

}
function insert_10436100(parent_10436102, elements_10436104) {
    L1: do {
      var element_10436137 = null;
      var element_10436137_Idx = 0;
      var i_11840184 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11840184 < (elements_10436104).length)) break L3;
            element_10436137 = elements_10436104; element_10436137_Idx = chckIndx(i_11840184, 0, (elements_10436104).length-1);
            parent_10436102.appendChild(element_10436137[element_10436137_Idx]);
            i_11840184 = addInt(i_11840184, 1);
          }
      } while(false);
    } while(false);

  
}
function toFloat_1236659(i_1236661) {
  var result_1236662 = 0.0;

    result_1236662 = i_1236661;

  return result_1236662;

}
function HEX2F_1575648(x_1575650, y_1575651) {
  var result_1575652 = 0.0;

    result_1575652 = (toFloat_1236659(x_1575650) / toFloat_1236659(y_1575651));

  return result_1575652;

}
function epochTime_11660141() {
  var result_11660143 = 0.0;

    result_11660143 = HEX2F_1575648(new Date().getTime(), 1000);

  return result_11660143;

}
function sysFatal_1325418(message_1325422) {
    raiseException({message: nimCopy(null, message_1325422, NTI1208013), m_type: NTI1214641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1325414(msg_1325416) {
    sysFatal_1325418(msg_1325416);

  
}
function failedAssertImpl_1325480(msg_1325482) {
    raiseAssert_1325414(msg_1325482);

  
}
function rotl_10438430(x_10438432, k_10438433) {
  var result_10438434 = 0;

    result_10438434 = ((x_10438432 << k_10438433) | ((x_10438432 >>> 0) >>> ((64 - k_10438433) >>> 0)));

  return result_10438434;

}
function next_10438458(r_10438461) {
  var result_10438462 = 0;

    var s0_10438463 = r_10438461.a0;
    var s1_10438464 = r_10438461.a1;
    result_10438462 = ((s0_10438463 + s1_10438464) >>> 0);
    s1_10438464 = (s1_10438464 ^ s0_10438463);
    r_10438461.a0 = ((rotl_10438430(s0_10438463, 55) ^ s1_10438464) ^ (s1_10438464 << 14));
    r_10438461.a1 = rotl_10438430(s1_10438464, 36);

  return result_10438462;

}
function initRand_10460214(seed_10460216) {
  var result_10460217 = [({a0: 0, a1: 0})];

    if (!(!((seed_10460216 == 0)))) {
    failedAssertImpl_1325480(makeNimstrLit("random.nim(568, 12) `seed != 0` "));
    }
    
    result_10460217[0].a0 = Math.floor(seed_10460216 / Math.pow(2,16));
    result_10460217[0].a1 = (seed_10460216 & 65535);
    var _ = next_10438458(result_10460217[0]);

  return result_10460217[0];

}
function randomize_10475222(seed_10475224) {
    nimCopy(state_10438205[0], initRand_10460214(seed_10475224), NTI10438202);

  
}
function randomize_11661001() {
    var time_11661203 = ((epochTime_11660141() * 1.0000000000000000e+03) & 2147483647);
    randomize_10475222(time_11661203);

  
}
function newCloud_11786014() {
  var result_11786016 = null;

    var cloud_11786019 = make_10436166(makeNimstrLit("div"), [makeNimstrLit("class=cloud")]);
    var cleft_11786022 = make_10436166(makeNimstrLit("div"), [makeNimstrLit("class=cloudling"), makeNimstrLit("id=cleft")]);
    var cbottom_11786025 = make_10436166(makeNimstrLit("div"), [makeNimstrLit("class=cloudling"), makeNimstrLit("id=cbottom")]);
    var cright_11786028 = make_10436166(makeNimstrLit("div"), [makeNimstrLit("class=cloudling"), makeNimstrLit("id=cright")]);
    var ctop_11786031 = make_10436166(makeNimstrLit("div"), [makeNimstrLit("class=cloudling"), makeNimstrLit("id=ctop")]);
    insert_10436100(cloud_11786019, [cleft_11786022, cbottom_11786025, cright_11786028, ctop_11786031]);
    result_11786016 = cloud_11786019;

  return result_11786016;

}
function rand_10440049(r_10440052, max_10440053) {
  var result_10440054 = 0;

  BeforeRet: do {
    if ((max_10440053 == 0)) {
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var x_10440055 = next_10438458(r_10440052);
          if ((x_10440055 <= ((4294967295 - (4294967295 % (max_10440053 >>> 0))) >>> 0))) {
          result_10440054 = chckRange((x_10440055 % ((max_10440053 + 1) )), -2147483648, 2147483647);
          break BeforeRet;
          }
          
        }
    } while(false);
  } while (false);

  return result_10440054;

}
function rand_11786154(r_11786157, x_11786159) {
  var result_11786160 = 0;

    result_11786160 = addInt(rand_10440049(r_11786157, chckRange(subInt(x_11786159.b, x_11786159.a), 0, 2147483647)), x_11786159.a);

  return result_11786160;

}
function rand_11786129(x_11786133) {
  var result_11786134 = 0;

    result_11786134 = rand_11786154(state_10438205[0], x_11786133);

  return result_11786134;

}
function HEX2EHEX2E_3460220(a_3460225, b_3460227) {
  var result_3460229 = ({a: 0, b: 0});

    nimCopy(result_3460229, {a: a_3460225, b: b_3460227}, NTI2355020);

  return result_3460229;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1214635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function parseSaturatedNatural_2035017(s_2035019, b_2035021, b_2035021_Idx, start_2035022) {
      var Tmp1;
          var Tmp4;

  var result_2035024 = 0;

    var i_2035025 = start_2035022;
    if (((i_2035025 < (s_2035019).length) && (s_2035019[chckIndx(i_2035025, 0, (s_2035019).length-1)] == 43))) {
    i_2035025 = addInt(i_2035025, 1);
    }
    
      if (!(i_2035025 < (s_2035019).length)) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_2035019[chckIndx(i_2035025, 0, (s_2035019).length-1)]] != undefined);      }    if (Tmp1) {
    b_2035021[b_2035021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_2035025 < (s_2035019).length)) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_2035019[chckIndx(i_2035025, 0, (s_2035019).length-1)]] != undefined);          }        if (!Tmp4) break L3;
          var c_2045016 = subInt(s_2035019[chckIndx(i_2035025, 0, (s_2035019).length-1)], 48);
          if ((b_2035021[b_2035021_Idx] <= divInt(subInt(2147483647, c_2045016), 10))) {
          b_2035021[b_2035021_Idx] = addInt(mulInt(b_2035021[b_2035021_Idx], 10), c_2045016);
          }
          else {
            b_2035021[b_2035021_Idx] = 2147483647;
          }
          
          i_2035025 = addInt(i_2035025, 1);
          L5: do {
              L6: while (true) {
              if (!((i_2035025 < (s_2035019).length) && (s_2035019[chckIndx(i_2035025, 0, (s_2035019).length-1)] == 95))) break L6;
                i_2035025 = addInt(i_2035025, 1);
              }
          } while(false);
        }
    } while(false);
    result_2035024 = subInt(i_2035025, start_2035022);
    }
    

  return result_2035024;

}
function HEX5BHEX5D_5910068(s_5910072, x_5910074) {
  var result_5910075 = [];

    var a_5910201 = x_5910074.a;
    var L_5910401 = addInt(subInt(subInt((s_5910072).length, x_5910074.b), a_5910201), 1);
    result_5910075 = nimCopy(null, mnewString(chckRange(L_5910401, 0, 2147483647)), NTI1208013);
    L1: do {
      var i_5910409 = 0;
      var i_11840214 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11840214 < L_5910401)) break L3;
            i_5910409 = i_11840214;
            result_5910075[chckIndx(i_5910409, 0, (result_5910075).length-1)] = s_5910072[chckIndx(addInt(i_5910409, a_5910201), 0, (s_5910072).length-1)];
            i_11840214 = addInt(i_11840214, 1);
          }
      } while(false);
    } while(false);

  return result_5910075;

}
function HEX2EHEX2E_5910001(a_5910006, b_5910008) {
  var result_5910014 = ({a: 0, b: 0});

    nimCopy(result_5910014, {a: a_5910006, b: b_5910008}, NTI5910011);

  return result_5910014;

}
function parseStandardFormatSpecifier_11670322(s_11670324, start_11670325, ignoreUnknownSuffix_11670327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_11670328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_11670328.fill = 32;
    result_11670328.align = 0;
    result_11670328.sign = 45;
    var i_11670331 = start_11670325;
    if (((addInt(i_11670331, 1) < (s_11670324).length) && (ConstSet2[s_11670324[chckIndx(addInt(i_11670331, 1), 0, (s_11670324).length-1)]] != undefined))) {
    result_11670328.fill = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    result_11670328.align = s_11670324[chckIndx(addInt(i_11670331, 1), 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 2);
    }
    else {
    if (((i_11670331 < (s_11670324).length) && (ConstSet3[s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)]] != undefined))) {
    result_11670328.align = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 1);
    }
    }
    if (((i_11670331 < (s_11670324).length) && (ConstSet4[s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)]] != undefined))) {
    result_11670328.sign = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 1);
    }
    
    if (((i_11670331 < (s_11670324).length) && (s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)] == 35))) {
    result_11670328.alternateForm = true;
    i_11670331 = addInt(i_11670331, 1);
    }
    
      if (!((addInt(i_11670331, 1) < (s_11670324).length) && (s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_11670324[chckIndx(addInt(i_11670331, 1), 0, (s_11670324).length-1)]] != undefined);      }    if (Tmp1) {
    result_11670328.padWithZero = true;
    i_11670331 = addInt(i_11670331, 1);
    }
    
    var parsedLength_11690015 = parseSaturatedNatural_2035017(s_11670324, result_11670328, "minimumWidth", i_11670331);
    i_11670331 = addInt(i_11670331, parsedLength_11690015);
    if (((i_11670331 < (s_11670324).length) && (s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)] == 46))) {
    i_11670331 = addInt(i_11670331, 1);
    var parsedLengthB_11690029 = parseSaturatedNatural_2035017(s_11670324, result_11670328, "precision", i_11670331);
    i_11670331 = addInt(i_11670331, parsedLengthB_11690029);
    }
    else {
      result_11670328.precision = -1;
    }
    
      if (!(i_11670331 < (s_11670324).length)) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)]] != undefined);      }    if (Tmp2) {
    result_11670328.typ = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 1);
    }
    
    result_11670328.endPosition = i_11670331;
      if (!!((i_11670331 == (s_11670324).length))) Tmp3 = false; else {        Tmp3 = !(ignoreUnknownSuffix_11670327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5910068(s_11670324, HEX2EHEX2E_5910001(i_11670331, 1)) || []), parent: null, m_type: NTI1214643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_11670328;

}
function mkDigit_11662054(v_11662056, typ_11662057) {
      var Tmp1;

  var result_11662058 = [];

    if (!((v_11662056 < 26))) {
    failedAssertImpl_1325480(makeNimstrLit("strformat.nim(315, 9) `v < 26` "));
    }
    
    if ((v_11662056 < 10)) {
    result_11662058 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_11662056), 0, 255)), NTI1208013);
    }
    else {
      if ((typ_11662057 == 120)) {
      Tmp1 = 97;
      }
      else {
      Tmp1 = 65;
      }
      
      result_11662058 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_11662056), 10), 0, 255)), NTI1208013);
    }
    

  return result_11662058;

}
function nsuRepeatChar(c_9960124, count_9960125) {
  var result_9960126 = [];

    result_9960126 = nimCopy(null, mnewString(count_9960125), NTI1208013);
    L1: do {
      var i_9960135 = 0;
      var colontmp__11840230 = 0;
      colontmp__11840230 = subInt(count_9960125, 1);
      var res_11840231 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11840231 <= colontmp__11840230)) break L3;
            i_9960135 = res_11840231;
            result_9960126[chckIndx(i_9960135, 0, (result_9960126).length-1)] = c_9960124;
            res_11840231 = addInt(res_11840231, 1);
          }
      } while(false);
    } while(false);

  return result_9960126;

}
function formatInt_11795002(n_11795005, radix_11795006, spec_11795007) {
    var Tmp7;

  var result_11795008 = [];

    var v_11795201 = n_11795005;
    var negative_11795202 = (v_11795201 < 0);
    if (negative_11795202) {
    v_11795201 = mulInt(v_11795201, -1);
    }
    
    var xx_11795203 = [];
    if (spec_11795007.alternateForm) {
    switch (spec_11795007.typ) {
    case 88:
      xx_11795203 = nimCopy(null, makeNimstrLit("0x"), NTI1208013);
      break;
    case 120:
      xx_11795203 = nimCopy(null, makeNimstrLit("0x"), NTI1208013);
      break;
    case 98:
      xx_11795203 = nimCopy(null, makeNimstrLit("0b"), NTI1208013);
      break;
    case 111:
      xx_11795203 = nimCopy(null, makeNimstrLit("0o"), NTI1208013);
      break;
    default: 
      break;
    }
    }
    
    if ((v_11795201 == 0)) {
    result_11795008 = nimCopy(null, makeNimstrLit("0"), NTI1208013);
    }
    else {
      result_11795008 = nimCopy(null, [], NTI1208013);
      L1: do {
          L2: while (true) {
          if (!(0 < v_11795201)) break L2;
            var d_11795206 = modInt(v_11795201, radix_11795006);
            v_11795201 = divInt(v_11795201, radix_11795006);
            result_11795008.push.apply(result_11795008, mkDigit_11662054(chckRange(d_11795206, -2147483648, 2147483647), spec_11795007.typ));;
          }
      } while(false);
      L3: do {
        var idx_11795215 = 0;
        var colontmp__11840222 = 0;
        colontmp__11840222 = divInt((result_11795008).length, 2);
        var i_11840223 = 0;
        L4: do {
            L5: while (true) {
            if (!(i_11840223 < colontmp__11840222)) break L5;
              idx_11795215 = i_11840223;
              var Tmp6 = result_11795008[chckIndx(idx_11795215, 0, (result_11795008).length-1)]; result_11795008[chckIndx(idx_11795215, 0, (result_11795008).length-1)] = result_11795008[chckIndx(subInt(subInt((result_11795008).length, idx_11795215), 1), 0, (result_11795008).length-1)]; result_11795008[chckIndx(subInt(subInt((result_11795008).length, idx_11795215), 1), 0, (result_11795008).length-1)] = Tmp6;              i_11840223 = addInt(i_11840223, 1);
            }
        } while(false);
      } while(false);
    }
    
    if (spec_11795007.padWithZero) {
    if (negative_11795202) Tmp7 = true; else {      Tmp7 = !((spec_11795007.sign == 45));    }    var sign_11805008 = Tmp7;
    var toFill_11805013 = subInt(subInt(subInt(spec_11795007.minimumWidth, (result_11795008).length), (xx_11795203).length), (sign_11805008 ? 1:0));
    if ((0 < toFill_11805013)) {
    result_11795008 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_11805013, 0, 2147483647)) || []).concat(result_11795008 || []), NTI1208013);
    }
    
    }
    
    if (negative_11795202) {
    result_11795008 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_11795203 || [],result_11795008 || []), NTI1208013);
    }
    else {
    if (!((spec_11795007.sign == 45))) {
    result_11795008 = nimCopy(null, [spec_11795007.sign].concat(xx_11795203 || [],result_11795008 || []), NTI1208013);
    }
    else {
      result_11795008 = nimCopy(null, (xx_11795203 || []).concat(result_11795008 || []), NTI1208013);
    }
    }
    if ((spec_11795007.align == 60)) {
    L8: do {
      var i_11805019 = 0;
      var colontmp__11840226 = 0;
      colontmp__11840226 = (result_11795008).length;
      var i_11840227 = colontmp__11840226;
      L9: do {
          L10: while (true) {
          if (!(i_11840227 < spec_11795007.minimumWidth)) break L10;
            i_11805019 = i_11840227;
            addChar(result_11795008, spec_11795007.fill);;
            i_11840227 = addInt(i_11840227, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      var toFill_11805020 = subInt(spec_11795007.minimumWidth, (result_11795008).length);
      if ((spec_11795007.align == 94)) {
      var half_11805021 = divInt(toFill_11805020, 2);
      result_11795008 = nimCopy(null, (nsuRepeatChar(spec_11795007.fill, chckRange(half_11805021, 0, 2147483647)) || []).concat(result_11795008 || [],nsuRepeatChar(spec_11795007.fill, chckRange(subInt(toFill_11805020, half_11805021), 0, 2147483647)) || []), NTI1208013);
      }
      else {
        if ((0 < toFill_11805020)) {
        result_11795008 = nimCopy(null, (nsuRepeatChar(spec_11795007.fill, chckRange(toFill_11805020, 0, 2147483647)) || []).concat(result_11795008 || []), NTI1208013);
        }
        
      }
      
    }
    

  return result_11795008;

}
function formatValue_11790001(result_11790004, result_11790004_Idx, value_11790005, specifier_11790006) {
  BeforeRet: do {
    if (((specifier_11790006).length == 0)) {
    result_11790004[result_11790004_Idx].push.apply(result_11790004[result_11790004_Idx], cstrToNimstr((value_11790005)+""));;
    break BeforeRet;
    }
    
    var spec_11790007 = parseStandardFormatSpecifier_11670322(specifier_11790006, 0, false);
    var radix_11790009 = 10;
    switch (spec_11790007.typ) {
    case 120:
    case 88:
      radix_11790009 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_11790009 = 2;
      break;
    case 111:
      radix_11790009 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_11790007.typ]), parent: null, m_type: NTI1214643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_11790004[result_11790004_Idx].push.apply(result_11790004[result_11790004_Idx], formatInt_11795002(value_11790005, radix_11790009, spec_11790007));;
  } while (false);

  
}
function sample_11815005(a_11815009) {
  var result_11815010 = [];

    result_11815010 = nimCopy(null, a_11815009[chckIndx(rand_11786129(HEX2EHEX2E_3460220(0, (a_11815009).length - 1)), 0, (a_11815009).length-1)], NTI1208013);

  return result_11815010;

}
function nsuformatBiggestFloat(f_10275221, format_10275222, precision_10275227, decimalSep_10275228) {
  var result_10275229 = [];

    var precision_10275401 = precision_10275227;
    if ((precision_10275401 == -1)) {
    precision_10275401 = 6;
    }
    
    var res_10275402 = null;
    switch (format_10275222) {
    case 0:
      res_10275402 = f_10275221.toString();
      break;
    case 1:
      res_10275402 = f_10275221.toFixed(precision_10275401);
      break;
    case 2:
      res_10275402 = f_10275221.toExponential(precision_10275401);
      break;
    }
    result_10275229 = nimCopy(null, cstrToNimstr(res_10275402), NTI1208013);
    if (((1.0000000000000000e+00 / f_10275221) == -Infinity)) {
    result_10275229 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_10275402) || []), NTI1208013);
    }
    
    L1: do {
      var i_10275410 = 0;
      var colontmp__11840239 = 0;
      colontmp__11840239 = (result_10275229).length;
      var i_11840240 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11840240 < colontmp__11840239)) break L3;
            i_10275410 = i_11840240;
            if ((ConstSet9[result_10275229[chckIndx(i_10275410, 0, (result_10275229).length-1)]] != undefined)) {
            result_10275229[chckIndx(i_10275410, 0, (result_10275229).length-1)] = decimalSep_10275228;
            }
            
            i_11840240 = addInt(i_11840240, 1);
          }
      } while(false);
    } while(false);

  return result_10275229;

}
function insert_1585401(x_1585404, x_1585404_Idx, item_1585405, i_1585406) {
    var xl_1585407 = (x_1585404[x_1585404_Idx]).length;
    (x_1585404[x_1585404_Idx].length = chckRange(addInt(xl_1585407, (item_1585405).length), 0, 2147483647));
    var j_1585408 = subInt(xl_1585407, 1);
    L1: do {
        L2: while (true) {
        if (!(i_1585406 <= j_1585408)) break L2;
          x_1585404[x_1585404_Idx][chckIndx(addInt(j_1585408, (item_1585405).length), 0, (x_1585404[x_1585404_Idx]).length-1)] = x_1585404[x_1585404_Idx][chckIndx(j_1585408, 0, (x_1585404[x_1585404_Idx]).length-1)];
          j_1585408 = subInt(j_1585408, 1);
        }
    } while(false);
    j_1585408 = 0;
    L3: do {
        L4: while (true) {
        if (!(j_1585408 < (item_1585405).length)) break L4;
          x_1585404[x_1585404_Idx][chckIndx(addInt(j_1585408, i_1585406), 0, (x_1585404[x_1585404_Idx]).length-1)] = item_1585405[chckIndx(j_1585408, 0, (item_1585405).length-1)];
          j_1585408 = addInt(j_1585408, 1);
        }
    } while(false);

  
}
function validateUtf8_2825244(s_2825246) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2825247 = 0;

  BeforeRet: do {
    var i_2825249 = 0;
    var L_2825250 = (s_2825246).length;
    L1: do {
        L2: while (true) {
        if (!(i_2825249 < L_2825250)) break L2;
          if ((s_2825246[chckIndx(i_2825249, 0, (s_2825246).length-1)] <= 127)) {
          i_2825249 = addInt(i_2825249, 1);
          }
          else {
          if ((((s_2825246[chckIndx(i_2825249, 0, (s_2825246).length-1)] >>> 0) >>> 5) == 6)) {
          if ((s_2825246[chckIndx(i_2825249, 0, (s_2825246).length-1)] < 194)) {
          result_2825247 = i_2825249;
          break BeforeRet;
          }
          
            if (!(addInt(i_2825249, 1) < L_2825250)) Tmp3 = false; else {              Tmp3 = (((s_2825246[chckIndx(addInt(i_2825249, 1), 0, (s_2825246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_2825249 = addInt(i_2825249, 2);
          }
          else {
            result_2825247 = i_2825249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2825246[chckIndx(i_2825249, 0, (s_2825246).length-1)] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2825249, 2) < L_2825250)) Tmp5 = false; else {              Tmp5 = (((s_2825246[chckIndx(addInt(i_2825249, 1), 0, (s_2825246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2825246[chckIndx(addInt(i_2825249, 2), 0, (s_2825246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_2825249 = addInt(i_2825249, 3);
          }
          else {
            result_2825247 = i_2825249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2825246[chckIndx(i_2825249, 0, (s_2825246).length-1)] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2825249, 3) < L_2825250)) Tmp8 = false; else {              Tmp8 = (((s_2825246[chckIndx(addInt(i_2825249, 1), 0, (s_2825246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2825246[chckIndx(addInt(i_2825249, 2), 0, (s_2825246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2825246[chckIndx(addInt(i_2825249, 3), 0, (s_2825246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_2825249 = addInt(i_2825249, 4);
          }
          else {
            result_2825247 = i_2825249;
            break BeforeRet;
          }
          
          }
          else {
            result_2825247 = i_2825249;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_2825247 = -1;
    break BeforeRet;
  } while (false);

  return result_2825247;

}
function nucruneLen(s_2583025) {
  var result_2583026 = 0;

    result_2583026 = 0;
    var i_2583028 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2583028 < (s_2583025).length)) break L2;
          if ((s_2583025[chckIndx(i_2583028, 0, (s_2583025).length-1)] <= 127)) {
          i_2583028 = addInt(i_2583028, 1);
          }
          else {
          if ((((s_2583025[chckIndx(i_2583028, 0, (s_2583025).length-1)] >>> 0) >>> 5) == 6)) {
          i_2583028 = addInt(i_2583028, 2);
          }
          else {
          if ((((s_2583025[chckIndx(i_2583028, 0, (s_2583025).length-1)] >>> 0) >>> 4) == 14)) {
          i_2583028 = addInt(i_2583028, 3);
          }
          else {
          if ((((s_2583025[chckIndx(i_2583028, 0, (s_2583025).length-1)] >>> 0) >>> 3) == 30)) {
          i_2583028 = addInt(i_2583028, 4);
          }
          else {
          if ((((s_2583025[chckIndx(i_2583028, 0, (s_2583025).length-1)] >>> 0) >>> 2) == 62)) {
          i_2583028 = addInt(i_2583028, 5);
          }
          else {
          if ((((s_2583025[chckIndx(i_2583028, 0, (s_2583025).length-1)] >>> 0) >>> 1) == 126)) {
          i_2583028 = addInt(i_2583028, 6);
          }
          else {
          i_2583028 = addInt(i_2583028, 1);
          }
          }}}}}
          result_2583026 = addInt(result_2583026, 1);
        }
    } while(false);

  return result_2583026;

}
function alignString_11670222(s_11670224, minimumWidth_11670225, align_11670226, fill_11670227) {
      var Tmp1;

  var result_11670228 = [];

    if ((minimumWidth_11670225 == 0)) {
    result_11670228 = nimCopy(null, s_11670224, NTI1208013);
    }
    else {
      if ((validateUtf8_2825244(s_11670224) == -1)) {
      Tmp1 = nucruneLen(s_11670224);
      }
      else {
      Tmp1 = (s_11670224).length;
      }
      
      var sRuneLen_11670229 = Tmp1;
      var toFill_11670230 = subInt(minimumWidth_11670225, sRuneLen_11670229);
      if ((toFill_11670230 <= 0)) {
      result_11670228 = nimCopy(null, s_11670224, NTI1208013);
      }
      else {
      if (((align_11670226 == 60) || (align_11670226 == 0))) {
      result_11670228 = nimCopy(null, (s_11670224 || []).concat(nsuRepeatChar(fill_11670227, chckRange(toFill_11670230, 0, 2147483647)) || []), NTI1208013);
      }
      else {
      if ((align_11670226 == 94)) {
      var half_11670231 = divInt(toFill_11670230, 2);
      result_11670228 = nimCopy(null, (nsuRepeatChar(fill_11670227, chckRange(half_11670231, 0, 2147483647)) || []).concat(s_11670224 || [],nsuRepeatChar(fill_11670227, chckRange(subInt(toFill_11670230, half_11670231), 0, 2147483647)) || []), NTI1208013);
      }
      else {
        result_11670228 = nimCopy(null, (nsuRepeatChar(fill_11670227, chckRange(toFill_11670230, 0, 2147483647)) || []).concat(s_11670224 || []), NTI1208013);
      }
      }}
    }
    

  return result_11670228;

}
function nsuToUpperAsciiChar(c_9450016) {
  var result_9450017 = 0;

    if ((ConstSet11[c_9450016] != undefined)) {
    result_9450017 = chckRange(subInt(c_9450016, 32), 0, 255);
    }
    else {
      result_9450017 = c_9450016;
    }
    

  return result_9450017;

}
function nsuToUpperAsciiStr(s_9455037) {
  var result_9455038 = [];

    result_9455038 = nimCopy(null, mnewString(chckRange((s_9455037).length, 0, 2147483647)), NTI1208013);
    L1: do {
      var iHEX60gensym11_9460009 = 0;
      var colontmp__11840264 = 0;
      colontmp__11840264 = subInt((s_9455037).length, 1);
      var res_11840265 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11840265 <= colontmp__11840264)) break L3;
            iHEX60gensym11_9460009 = res_11840265;
            result_9455038[chckIndx(iHEX60gensym11_9460009, 0, (result_9455038).length-1)] = nsuToUpperAsciiChar(s_9455037[chckIndx(iHEX60gensym11_9460009, 0, (s_9455037).length-1)]);
            res_11840265 = addInt(res_11840265, 1);
          }
      } while(false);
    } while(false);

  return result_9455038;

}
function formatValue_11825001(result_11825004, result_11825004_Idx, value_11825005, specifier_11825006) {
    var Tmp1;

  BeforeRet: do {
    if (((specifier_11825006).length == 0)) {
    result_11825004[result_11825004_Idx].push.apply(result_11825004[result_11825004_Idx], cstrToNimstr(nimFloatToString(value_11825005)));;
    break BeforeRet;
    }
    
    var spec_11825007 = parseStandardFormatSpecifier_11670322(specifier_11825006, 0, false);
    var fmode_11825008 = 0;
    switch (spec_11825007.typ) {
    case 101:
    case 69:
      fmode_11825008 = 2;
      break;
    case 102:
    case 70:
      fmode_11825008 = 1;
      break;
    case 103:
    case 71:
      fmode_11825008 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_11825007.typ]), parent: null, m_type: NTI1214643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_11830002 = [nsuformatBiggestFloat(value_11825005, fmode_11825008, chckRange(spec_11825007.precision, -1, 32), 46)];
    var sign_11830003 = false;
    if ((0.0 <= value_11825005)) {
    if (!((spec_11825007.sign == 45))) {
    sign_11830003 = true;
    if ((value_11825005 == 0.0)) {
    if (((1.0000000000000000e+00 / value_11825005) == Infinity)) {
    insert_1585401(f_11830002, 0, nimCharToStr(spec_11825007.sign), 0);
    }
    
    }
    else {
    insert_1585401(f_11830002, 0, nimCharToStr(spec_11825007.sign), 0);
    }
    
    }
    
    }
    else {
      sign_11830003 = true;
    }
    
    if (spec_11825007.padWithZero) {
    var signStr_11830006 = [];
    if (sign_11830003) {
    signStr_11830006 = nimCopy(null, nimCharToStr(f_11830002[0][chckIndx(0, 0, (f_11830002[0]).length-1)]), NTI1208013);
    f_11830002[0] = nimCopy(null, HEX5BHEX5D_5910068(f_11830002[0], HEX2EHEX2E_5910001(1, 1)), NTI1208013);
    }
    
    var toFill_11840040 = subInt(subInt(spec_11825007.minimumWidth, (f_11830002[0]).length), (sign_11830003 ? 1:0));
    if ((0 < toFill_11840040)) {
    f_11830002[0] = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_11840040, 0, 2147483647)) || []).concat(f_11830002[0] || []), NTI1208013);
    }
    
    if (sign_11830003) {
    f_11830002[0] = nimCopy(null, (signStr_11830006 || []).concat(f_11830002[0] || []), NTI1208013);
    }
    
    }
    
    if ((spec_11825007.align == 0)) {
    Tmp1 = 62;
    }
    else {
    Tmp1 = spec_11825007.align;
    }
    
    var align_11840041 = Tmp1;
    var res_11840042 = alignString_11670222(f_11830002[0], spec_11825007.minimumWidth, align_11840041, spec_11825007.fill);
    if ((ConstSet10[spec_11825007.typ] != undefined)) {
    result_11825004[result_11825004_Idx].push.apply(result_11825004[result_11825004_Idx], nsuToUpperAsciiStr(res_11840042));;
    }
    else {
    result_11825004[result_11825004_Idx].push.apply(result_11825004[result_11825004_Idx], res_11840042);;
    }
    
  } while (false);

  
}
function HEX2BHEX3D_10310021(x_10310025, x_10310025_Idx, y_10310026) {
    x_10310025[x_10310025_Idx] = (x_10310025[x_10310025_Idx] + y_10310026);

  
}
function scatterClouds_11786092(sky_11786094) {
    randomize_11661001();
    var i_11786095 = [0.0];
    L1: do {
        L2: while (true) {
        if (!(i_11786095[0] < 3.0000000000000000e+00)) break L2;
          var cloud_11786096 = newCloud_11786014();
          var randTop_11786228 = rand_11786129(HEX2EHEX2E_3460220(5, 80));
          var randLeft_11786266 = rand_11786129(HEX2EHEX2E_3460220(5, 80));
          var fmtRes_11786270 = [mnewString(0)];
          formatValue_11790001(fmtRes_11786270, 0, randTop_11786228, []);
          fmtRes_11786270[0].push.apply(fmtRes_11786270[0], makeNimstrLit("%"));;
          cloud_11786096.style.top = toJSStr(fmtRes_11786270[0]);
          var fmtRes_11805049 = [mnewString(0)];
          formatValue_11790001(fmtRes_11805049, 0, randLeft_11786266, []);
          fmtRes_11805049[0].push.apply(fmtRes_11805049[0], makeNimstrLit("%"));;
          cloud_11786096.style.left = toJSStr(fmtRes_11805049[0]);
          var animation_11810008 = [];
          if ((randLeft_11786266 < 20)) {
          animation_11810008 = nimCopy(null, makeNimstrLit("clouds-left"), NTI1208013);
          }
          else {
          if ((60 < randLeft_11786266)) {
          animation_11810008 = nimCopy(null, makeNimstrLit("clouds-right"), NTI1208013);
          }
          else {
            animation_11810008 = nimCopy(null, sample_11815005([makeNimstrLit("clouds-left"), makeNimstrLit("clouds-right")]), NTI1208013);
          }
          }
          if ((randTop_11786228 < 30)) {
          }
          
          cloud_11786096.style.animationName = toJSStr(animation_11810008);
          var fmtRes_11815067 = [mnewString(0)];
          formatValue_11790001(fmtRes_11815067, 0, rand_11786129(HEX2EHEX2E_3460220(300, 400)), []);
          fmtRes_11815067[0].push.apply(fmtRes_11815067[0], makeNimstrLit("s"));;
          cloud_11786096.style.animationDuration = toJSStr(fmtRes_11815067[0]);
          var fmtRes_11820046 = [mnewString(0)];
          fmtRes_11820046[0].push.apply(fmtRes_11820046[0], makeNimstrLit("-"));;
          formatValue_11825001(fmtRes_11820046, 0, i_11786095[0], []);
          fmtRes_11820046[0].push.apply(fmtRes_11820046[0], makeNimstrLit("s"));;
          cloud_11786096.style.animationDelay = toJSStr(fmtRes_11820046[0]);
          insert_10436100(sky_11786094, [cloud_11786096]);
          HEX2BHEX3D_10310021(i_11786095, 0, 2.9999999999999999e-01);
        }
    } while(false);

  
}
function onPageLoad_11840116() {
    var sky_11840118 = getId_10436020(makeNimstrLit("sky"));
    var peak_11840121 = make_10436166(makeNimstrLit("div"), [makeNimstrLit("class=peak")]);
    insert_10436100(sky_11840118, [peak_11840121]);
    scatterClouds_11786092(sky_11840118);

  
}
onPageLoad_11840116();
