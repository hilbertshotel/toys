/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1214621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9690015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI5645232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5900011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11788003 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1872749 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2337015 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI2337202 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1208015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1214723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1214617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1214641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214641.node = NNI1214641;
var NNI1214619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214619.node = NNI1214619;
NTI1214723.base = NTI1214617;
NTI1214728.base = NTI1214617;
var NNI1214617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1214723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1208015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1208013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1208013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1214728, name: "up", sons: null}]};
NTI1214617.node = NNI1214617;
var NNI1214408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214408.node = NNI1214408;
NTI1214617.base = NTI1214408;
NTI1214619.base = NTI1214617;
NTI1214641.base = NTI1214619;
var NNI2337202 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI2337015, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI2337015, name: "a1", sons: null}]};
NTI2337202.node = NNI2337202;
var NNI1214637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214637.node = NNI1214637;
var NNI1214633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214633.node = NNI1214633;
NTI1214633.base = NTI1214619;
NTI1214637.base = NTI1214633;
var NNI1214653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214653.node = NNI1214653;
NTI1214653.base = NTI1214619;
var NNI1872749 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1208044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1208044, name: "b", sons: null}]};
NTI1872749.node = NNI1872749;
var NNI1214649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214649.node = NNI1214649;
NTI1214649.base = NTI1214619;
var NNI11788003 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI1208013, name: "name", sons: null}, 
{kind: 1, offset: "hex", len: 0, typ: NTI1208013, name: "hex", sons: null}]};
NTI11788003.node = NNI11788003;
var NNI5900011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5645232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1208044, name: "b", sons: null}]};
NTI5900011.node = NNI5900011;
NTI9690015.base = NTI1208013;
var NNI1214635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214635.node = NNI1214635;
NTI1214635.base = NTI1214633;
var NNI1214643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214643.node = NNI1214643;
var NNI1214621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214621.node = NNI1214621;
NTI1214621.base = NTI1214617;
NTI1214643.base = NTI1214621;
function toJSStr(s_1475096) {
                    var Tmp5;
            var Tmp7;

  var result_1475097 = null;

    var res_1475170 = newSeq_1475128((s_1475096).length);
    var i_1475172 = 0;
    var j_1475174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1475172 < (s_1475096).length)) break L2;
          var c_1475175 = s_1475096[i_1475172];
          if ((c_1475175 < 128)) {
          res_1475170[j_1475174] = String.fromCharCode(c_1475175);
          i_1475172 += 1;
          }
          else {
            var helper_1475198 = newSeq_1475128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1475199 = c_1475175.toString(16);
                  if (((code_1475199).length == 1)) {
                  helper_1475198.push("%0");;
                  }
                  else {
                  helper_1475198.push("%");;
                  }
                  
                  helper_1475198.push(code_1475199);;
                  i_1475172 += 1;
                    if (((s_1475096).length <= i_1475172)) Tmp5 = true; else {                      Tmp5 = (s_1475096[i_1475172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1475175 = s_1475096[i_1475172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1475170[j_1475174] = decodeURIComponent(helper_1475198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1475170[j_1475174] = helper_1475198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1475174 += 1;
        }
    } while(false);
    if (res_1475170.length < j_1475174) { for (var i=res_1475170.length;i<j_1475174;++i) res_1475170.push(null); }
               else { res_1475170.length = j_1475174; };
    result_1475097 = res_1475170.join("");

  return result_1475097;

}
function makeNimstrLit(c_1475062) {
      var ln = c_1475062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1475062.charCodeAt(i);
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1490023, src_1490024, ti_1490025) {
  var result_1495219 = null;

    switch (ti_1490025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1485401(ti_1490025))) {
      result_1495219 = src_1490024;
      }
      else {
        result_1495219 = [src_1490024[0], src_1490024[1]];
      }
      
      break;
    case 19:
            if (dest_1490023 === null || dest_1490023 === undefined) {
        dest_1490023 = {};
      }
      else {
        for (var key in dest_1490023) { delete dest_1490023[key]; }
      }
      for (var key in src_1490024) { dest_1490023[key] = src_1490024[key]; }
      result_1495219 = dest_1490023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1490025.base == null))) {
      result_1495219 = nimCopy(dest_1490023, src_1490024, ti_1490025.base);
      }
      else {
      if ((ti_1490025.kind == 17)) {
      result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {m_type: ti_1490025} : dest_1490023;
      }
      else {
        result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {} : dest_1490023;
      }
      }
      nimCopyAux(result_1495219, src_1490024, ti_1490025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1490024 === null) {
        result_1495219 = null;
      }
      else {
        if (dest_1490023 === null || dest_1490023 === undefined) {
          dest_1490023 = new Array(src_1490024.length);
        }
        else {
          dest_1490023.length = src_1490024.length;
        }
        result_1495219 = dest_1490023;
        for (var i = 0; i < src_1490024.length; ++i) {
          result_1495219[i] = nimCopy(result_1495219[i], src_1490024[i], ti_1490025.base);
        }
      }
    
      break;
    case 28:
            if (src_1490024 !== null) {
        result_1495219 = src_1490024.slice(0);
      }
    
      break;
    default: 
      result_1495219 = src_1490024;
      break;
    }

  return result_1495219;

}
function raiseException(e_1440218, ename_1440219) {
    e_1440218.name = ename_1440219;
    if ((excHandler == 0)) {
    unhandledException(e_1440218);
    }
    
    throw e_1440218;

  
}
function addInt(a_1480419, b_1480420) {
        var result = a_1480419 + b_1480420;
    checkOverflowInt(result);
    return result;
  

  
}
function chckRange(i_1505016, a_1505017, b_1505018) {
      var Tmp1;

  var result_1505019 = 0;

  BeforeRet: do {
      if (!(a_1505017 <= i_1505016)) Tmp1 = false; else {        Tmp1 = (i_1505016 <= b_1505018);      }    if (Tmp1) {
    result_1505019 = i_1505016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1505019;

}
function subInt(a_1480437, b_1480438) {
        var result = a_1480437 - b_1480438;
    checkOverflowInt(result);
    return result;
  

  
}
function cstrToNimstr(c_1475079) {
      var ln = c_1475079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1475079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1475079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function chckIndx(i_1500086, a_1500087, b_1500088) {
      var Tmp1;

  var result_1500089 = 0;

  BeforeRet: do {
      if (!(a_1500087 <= i_1500086)) Tmp1 = false; else {        Tmp1 = (i_1500086 <= b_1500088);      }    if (Tmp1) {
    result_1500089 = i_1500086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1500086, a_1500087, b_1500088);
    }
    
  } while (false);

  return result_1500089;

}
            var COLORS_11788026 = [{name: makeNimstrLit("white"), hex: makeNimstrLit("#FFFFFF")}, {name: makeNimstrLit("yellow"), hex: makeNimstrLit("#FFdd00")}, {name: makeNimstrLit("orange"), hex: makeNimstrLit("#FF9100")}, {name: makeNimstrLit("red"), hex: makeNimstrLit("#FF4b1F")}, {name: makeNimstrLit("brown"), hex: makeNimstrLit("#9e5b0e")}, {name: makeNimstrLit("green"), hex: makeNimstrLit("#6e9900")}, {name: makeNimstrLit("blue"), hex: makeNimstrLit("#146de0")}, {name: makeNimstrLit("purple"), hex: makeNimstrLit("#a34aa3")}, {name: makeNimstrLit("pink"), hex: makeNimstrLit("#feafc9")}, {name: makeNimstrLit("grey"), hex: makeNimstrLit("#b6b6b6")}, {name: makeNimstrLit("black"), hex: makeNimstrLit("#1e1e1e")}];
function eqStrings(a_1480222, b_1480223) {
        if (a_1480222 == b_1480223) return true;
    if (a_1480222 === null && b_1480223.length == 0) return true;
    if (b_1480223 === null && a_1480222.length == 0) return true;
    if ((!a_1480222) || (!b_1480223)) return false;
    var alen = a_1480222.length;
    if (alen != b_1480223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1480222[i] != b_1480223[i]) return false;
    return true;
  

  
}
function nimMax(a_1480821, b_1480822) {
    var Tmp1;

  var result_1480823 = 0;

  BeforeRet: do {
    if ((b_1480822 <= a_1480821)) {
    Tmp1 = a_1480821;
    }
    else {
    Tmp1 = b_1480822;
    }
    
    result_1480823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1480823;

}
function nimMin(a_1480803, b_1480804) {
    var Tmp1;

  var result_1480805 = 0;

  BeforeRet: do {
    if ((a_1480803 <= b_1480804)) {
    Tmp1 = a_1480803;
    }
    else {
    Tmp1 = b_1480804;
    }
    
    result_1480805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1480805;

}
function mnewString(len_1480044) {
        return new Array(len_1480044);
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_1480473, b_1480474) {
        if (b_1480474 == 0) raiseDivByZero();
    if (b_1480474 == -1 && a_1480473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1480473 / b_1480474);
  

  
}
function mulInt(a_1480455, b_1480456) {
        var result = a_1480455 * b_1480456;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var state_2337205 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_11040231 === undefined) {
  utcInstance_11040231 = [null];
}
if (globalThis.localInstance_11040232 === undefined) {
  localInstance_11040232 = [null];
}
function newSeq_1475128(len_1475131) {
  var result_1475133 = [];

    result_1475133 = new Array(len_1475131); for (var i=0;i<len_1475131;++i) {result_1475133[i]=null;}
  return result_1475133;

}
function getId_11787046(id_11787048) {
  var result_11787049 = null;

    result_11787049 = document.getElementById(toJSStr(id_11787048));

  return result_11787049;

}
function getAudio_11787220(id_11787222) {
  var result_11787223 = null;

  BeforeRet: do {
    result_11787223 = getId_11787046(id_11787222);
    break BeforeRet;
  } while (false);

  return result_11787223;

}
function toFloat_1236659(i_1236661) {
  var result_1236662 = 0.0;

    result_1236662 = i_1236661;

  return result_1236662;

}
function HEX2F_1575648(x_1575650, y_1575651) {
  var result_1575652 = 0.0;

    result_1575652 = (toFloat_1236659(x_1575650) / toFloat_1236659(y_1575651));

  return result_1575652;

}
function epochTime_11610141() {
  var result_11610143 = 0.0;

    result_11610143 = HEX2F_1575648(new Date().getTime(), 1000);

  return result_11610143;

}
function isFatPointer_1485401(ti_1485403) {
  var result_1485404 = false;

  BeforeRet: do {
    result_1485404 = !((ConstSet1[ti_1485403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1485404;

}
function nimCopyAux(dest_1490028, src_1490029, n_1490031) {
    switch (n_1490031.kind) {
    case 0:
      break;
    case 1:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1490031.sons.length; i++) {
      nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i]);
    }
    
      break;
    case 3:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
      for (var i = 0; i < n_1490031.sons.length; ++i) {
        nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1377211(x_1377214, x_1377214_Idx, y_1377215) {
          if (x_1377214[x_1377214_Idx] === null) { x_1377214[x_1377214_Idx] = []; }
      var off = x_1377214[x_1377214_Idx].length;
      x_1377214[x_1377214_Idx].length += y_1377215.length;
      for (var i = 0; i < y_1377215.length; ++i) {
        x_1377214[x_1377214_Idx][off+i] = y_1377215.charCodeAt(i);
      }
    

  
}
function unhandledException(e_1435059) {
    var buf_1435060 = [[]];
    if (!(((e_1435059.message).length == 0))) {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1435060[0].push.apply(buf_1435060[0], e_1435059.message);;
    }
    else {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit(" ["));;
    add_1377211(buf_1435060, 0, e_1435059.name);
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1440201 = toJSStr(buf_1435060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1440201);
  }
  else {
    throw cbuf_1440201;
  }
  

  
}
function sysFatal_1325418(message_1325422) {
    raiseException({message: nimCopy(null, message_1325422, NTI1208013), m_type: NTI1214641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1325414(msg_1325416) {
    sysFatal_1325418(msg_1325416);

  
}
function failedAssertImpl_1325480(msg_1325482) {
    raiseAssert_1325414(msg_1325482);

  
}
function rotl_2337430(x_2337432, k_2337433) {
  var result_2337434 = 0;

    result_2337434 = ((x_2337432 << k_2337433) | ((x_2337432 >>> 0) >>> ((64 - k_2337433) >>> 0)));

  return result_2337434;

}
function next_2337458(r_2337461) {
  var result_2337462 = 0;

    var s0_2337463 = r_2337461.a0;
    var s1_2337464 = r_2337461.a1;
    result_2337462 = ((s0_2337463 + s1_2337464) >>> 0);
    s1_2337464 = (s1_2337464 ^ s0_2337463);
    r_2337461.a0 = ((rotl_2337430(s0_2337463, 55) ^ s1_2337464) ^ (s1_2337464 << 14));
    r_2337461.a1 = rotl_2337430(s1_2337464, 36);

  return result_2337462;

}
function initRand_2360214(seed_2360216) {
  var result_2360217 = [({a0: 0, a1: 0})];

    if (!(!((seed_2360216 == 0)))) {
    failedAssertImpl_1325480(makeNimstrLit("random.nim(568, 12) `seed != 0` "));
    }
    
    result_2360217[0].a0 = Math.floor(seed_2360216 / Math.pow(2,16));
    result_2360217[0].a1 = (seed_2360216 & 65535);
    var _ = next_2337458(result_2360217[0]);

  return result_2360217[0];

}
function randomize_2375222(seed_2375224) {
    nimCopy(state_2337205[0], initRand_2360214(seed_2375224), NTI2337202);

  
}
function randomize_11611001() {
    var time_11611203 = ((epochTime_11610141() * 1.0000000000000000e+003) & 2147483647);
    randomize_2375222(time_11611203);

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1214637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1480403) {
        if (a_1480403 > 2147483647 || a_1480403 < -2147483648) raiseOverflow();
  

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1214653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function rand_2340049(r_2340052, max_2340053) {
  var result_2340054 = 0;

  BeforeRet: do {
    if ((max_2340053 == 0)) {
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var x_2340055 = next_2337458(r_2340052);
          if ((x_2340055 <= ((4294967295 - (4294967295 % (max_2340053 >>> 0))) >>> 0))) {
          result_2340054 = chckRange((x_2340055 % ((max_2340053 + 1) )), -2147483648, 2147483647);
          break BeforeRet;
          }
          
        }
    } while(false);
  } while (false);

  return result_2340054;

}
function rand_11790099(r_11790102, x_11790104) {
  var result_11790105 = 0;

    result_11790105 = addInt(rand_2340049(r_11790102, chckRange(subInt(x_11790104.b, x_11790104.a), 0, 2147483647)), x_11790104.a);

  return result_11790105;

}
function rand_11790074(x_11790078) {
  var result_11790079 = 0;

    result_11790079 = rand_11790099(state_2337205[0], x_11790078);

  return result_11790079;

}
function HEX2EHEX2E_3450220(a_3450225, b_3450227) {
  var result_3450229 = ({a: 0, b: 0});

    nimCopy(result_3450229, {a: a_3450225, b: b_3450227}, NTI1872749);

  return result_3450229;

}
function raiseIndexError(i_1460047, a_1460048, b_1460049) {
    var Tmp1;

    if ((b_1460049 < a_1460048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1460047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1460048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1460049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1208013), parent: null, m_type: NTI1214649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function sample_11790030(a_11790034) {
  var result_11790035 = ({name: [], hex: []});

    nimCopy(result_11790035, a_11790034[chckIndx(rand_11790074(HEX2EHEX2E_3450220(0, ((a_11790034).length-1))), 0, (a_11790034).length-1)], NTI11788003);

  return result_11790035;

}
function sampleTileColors_11790014() {
  var result_11790017 = [];

    randomize_11611001();
    L1: do {
      var i_11790027 = 0;
      var res_11860084 = 1;
      L2: do {
          L3: while (true) {
          if (!(res_11860084 <= 36)) break L3;
            i_11790027 = res_11860084;
            result_11790017.push(sample_11790030(COLORS_11788026));;
            res_11860084 = addInt(res_11860084, 1);
          }
      } while(false);
    } while(false);

  return result_11790017;

}
function HEX26_11800832(x_11800836, y_11800838) {
  var result_11800840 = [];

    result_11800840 = new Array(chckRange(addInt((x_11800836).length, (y_11800838).length), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_11800836).length, (y_11800838).length), 0, 2147483647);++i) {result_11800840[i]=({name: [], hex: []});}    L1: do {
      var i_11800871 = 0;
      var colontmp__11860124 = 0;
      colontmp__11860124 = subInt((x_11800836).length, 1);
      var res_11860125 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11860125 <= colontmp__11860124)) break L3;
            i_11800871 = res_11860125;
            nimCopy(result_11800840[chckIndx(i_11800871, 0, (result_11800840).length-1)], x_11800836[chckIndx(i_11800871, 0, (x_11800836).length-1)], NTI11788003);
            res_11860125 = addInt(res_11860125, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      var i_11800885 = 0;
      var colontmp__11860131 = 0;
      colontmp__11860131 = subInt((y_11800838).length, 1);
      var res_11860132 = 0;
      L5: do {
          L6: while (true) {
          if (!(res_11860132 <= colontmp__11860131)) break L6;
            i_11800885 = res_11860132;
            nimCopy(result_11800840[chckIndx(addInt(i_11800885, (x_11800836).length), 0, (result_11800840).length-1)], y_11800838[chckIndx(i_11800885, 0, (y_11800838).length-1)], NTI11788003);
            res_11860132 = addInt(res_11860132, 1);
          }
      } while(false);
    } while(false);

  return result_11800840;

}
function HEX5BHEX5D_11800022(s_11800028, x_11800030) {
  var result_11800032 = [];

    var a_11800201 = x_11800030.a;
    var L_11800405 = addInt(subInt(subInt((s_11800028).length, x_11800030.b), a_11800201), 1);
    result_11800032 = new Array(chckRange(L_11800405, 0, 2147483647)); for (var i=0;i<chckRange(L_11800405, 0, 2147483647);++i) {result_11800032[i]=({name: [], hex: []});}    L1: do {
      var i_11800420 = 0;
      var i_11860140 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860140 < L_11800405)) break L3;
            i_11800420 = i_11860140;
            nimCopy(result_11800032[chckIndx(i_11800420, 0, (result_11800032).length-1)], s_11800028[chckIndx(addInt(i_11800420, a_11800201), 0, (s_11800028).length-1)], NTI11788003);
            i_11860140 = addInt(i_11860140, 1);
          }
      } while(false);
    } while(false);

  return result_11800032;

}
function HEX2EHEX2E_5900001(a_5900006, b_5900008) {
  var result_5900014 = ({a: 0, b: 0});

    nimCopy(result_5900014, {a: a_5900006, b: b_5900008}, NTI5900011);

  return result_5900014;

}
function HEX5BHEX5D_11800474(s_11800480, x_11800482) {
  var result_11800484 = [];

    var a_11800601 = x_11800482.a;
    var L_11800801 = addInt(subInt(x_11800482.b, a_11800601), 1);
    result_11800484 = new Array(chckRange(L_11800801, 0, 2147483647)); for (var i=0;i<chckRange(L_11800801, 0, 2147483647);++i) {result_11800484[i]=({name: [], hex: []});}    L1: do {
      var i_11800816 = 0;
      var i_11860147 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860147 < L_11800801)) break L3;
            i_11800816 = i_11860147;
            nimCopy(result_11800484[chckIndx(i_11800816, 0, (result_11800484).length-1)], s_11800480[chckIndx(addInt(i_11800816, a_11800601), 0, (s_11800480).length-1)], NTI11788003);
            i_11860147 = addInt(i_11860147, 1);
          }
      } while(false);
    } while(false);

  return result_11800484;

}
function find_9950009(a_9950013, item_9950014) {
  var result_9950015 = 0;

  BeforeRet: do {
    result_9950015 = 0;
    L1: do {
      var i_9950022 = null;
      var i_9950022_Idx = 0;
      var i_11860151 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860151 < (a_9950013).length)) break L3;
            i_9950022 = a_9950013; i_9950022_Idx = chckIndx(i_11860151, 0, (a_9950013).length-1);
            if (eqStrings(i_9950022[i_9950022_Idx], item_9950014)) {
            break BeforeRet;
            }
            
            result_9950015 = addInt(result_9950015, 1);
            i_11860151 = addInt(i_11860151, 1);
          }
      } while(false);
    } while(false);
    result_9950015 = -1;
  } while (false);

  return result_9950015;

}
function contains_9950002(a_9950006, item_9950007) {
  var result_9950008 = false;

  BeforeRet: do {
    result_9950008 = (0 <= find_9950009(a_9950006, item_9950007));
    break BeforeRet;
  } while (false);

  return result_9950008;

}
function sortByNextOccurence_11790277(tileColors_11790280) {
  var result_11790282 = [];

    var colors_11800904 = HEX26_11800832(HEX5BHEX5D_11800022(tileColors_11790280, HEX2EHEX2E_5900001(18, 1)), HEX5BHEX5D_11800474(tileColors_11790280, HEX2EHEX2E_3450220(0, 17)));
    var currentColor_11800905 = [];
    L1: do {
      var c_11810214 = null;
      var i_11860120 = 0;
      var L_11860121 = (colors_11800904).length;
      L2: do {
          L3: while (true) {
          if (!(i_11860120 < L_11860121)) break L3;
            c_11810214 = colors_11800904[chckIndx(i_11860120, 0, (colors_11800904).length-1)];
            currentColor_11800905 = nimCopy(null, c_11810214.hex, NTI1208013);
            if (!(contains_9950002(result_11790282, currentColor_11800905))) {
            L4: do {
              var color_11815015 = null;
              var i_11860117 = 0;
              var L_11860118 = (colors_11800904).length;
              L5: do {
                  L6: while (true) {
                  if (!(i_11860117 < L_11860118)) break L6;
                    color_11815015 = colors_11800904[chckIndx(i_11860117, 0, (colors_11800904).length-1)];
                    if (eqStrings(color_11815015.hex, currentColor_11800905)) {
                    var Tmp7 = nimCopy(null, color_11815015.hex, NTI1208013);
                    result_11790282.push(Tmp7);;
                    }
                    
                    i_11860117 = addInt(i_11860117, 1);
                    if (!(((colors_11800904).length == L_11860118))) {
                    failedAssertImpl_1325480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            }
            
            i_11860120 = addInt(i_11860120, 1);
            if (!(((colors_11800904).length == L_11860121))) {
            failedAssertImpl_1325480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  return result_11790282;

}
function substr_1591022(s_1591024, first_1591025, last_1591026) {
  var result_1591027 = [];

    var first_1591028 = nimMax(first_1591025, 0);
    var L_1591030 = nimMax(addInt(subInt(nimMin(last_1591026, ((s_1591024).length-1)), first_1591028), 1), 0);
    result_1591027 = nimCopy(null, mnewString(chckRange(L_1591030, 0, 2147483647)), NTI1208013);
    L1: do {
      var i_1591039 = 0;
      var colontmp__11860172 = 0;
      colontmp__11860172 = subInt(L_1591030, 1);
      var res_11860173 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11860173 <= colontmp__11860172)) break L3;
            i_1591039 = res_11860173;
            result_1591027[chckIndx(i_1591039, 0, (result_1591027).length-1)] = s_1591024[chckIndx(addInt(i_1591039, first_1591028), 0, (s_1591024).length-1)];
            res_11860173 = addInt(res_11860173, 1);
          }
      } while(false);
    } while(false);

  return result_1591027;

}
function nsuSplitChar(s_9685034, sep_9685035, maxsplit_9685036) {
  var result_9685038 = [];

    result_9685038 = nimCopy(null, [], NTI9690015);
    L1: do {
      var xHEX60gensym59_9690016 = [];
      var lastHEX60gensym26_11860166 = 0;
      var splitsHEX60gensym26_11860167 = maxsplit_9685036;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym26_11860166 <= (s_9685034).length)) break L3;
            var firstHEX60gensym26_11860169 = lastHEX60gensym26_11860166;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym26_11860166 < (s_9685034).length) && !((s_9685034[chckIndx(lastHEX60gensym26_11860166, 0, (s_9685034).length-1)] == sep_9685035)))) break L5;
                  lastHEX60gensym26_11860166 = addInt(lastHEX60gensym26_11860166, 1);
                }
            } while(false);
            if ((splitsHEX60gensym26_11860167 == 0)) {
            lastHEX60gensym26_11860166 = (s_9685034).length;
            }
            
            xHEX60gensym59_9690016 = substr_1591022(s_9685034, firstHEX60gensym26_11860169, subInt(lastHEX60gensym26_11860166, 1));
            var Tmp6 = nimCopy(null, xHEX60gensym59_9690016, NTI1208013);
            result_9685038.push(Tmp6);;
            if ((splitsHEX60gensym26_11860167 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym26_11860167 = subInt(splitsHEX60gensym26_11860167, 1);
            lastHEX60gensym26_11860166 = addInt(lastHEX60gensym26_11860166, 1);
          }
      } while(false);
    } while(false);

  return result_9685038;

}
function make_11787192(kind_11787194, properties_11787196) {
  var result_11787197 = null;

    var element_11787198 = document.createElement(toJSStr(kind_11787194));
    L1: do {
      var property_11787205 = null;
      var property_11787205_Idx = 0;
      var i_11860161 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860161 < (properties_11787196).length)) break L3;
            property_11787205 = properties_11787196; property_11787205_Idx = chckIndx(i_11860161, 0, (properties_11787196).length-1);
            var p_11787206 = nsuSplitChar(property_11787205[property_11787205_Idx], 61, -1);
            switch (toJSStr(p_11787206[chckIndx(0, 0, (p_11787206).length-1)])) {
            case "class":
              element_11787198.className = toJSStr(p_11787206[chckIndx(1, 0, (p_11787206).length-1)]);
              break;
            case "id":
              element_11787198.id = toJSStr(p_11787206[chckIndx(1, 0, (p_11787206).length-1)]);
              break;
            case "text":
              element_11787198.innerHTML = toJSStr(p_11787206[chckIndx(1, 0, (p_11787206).length-1)]);
              break;
            default: 
              break;
            }
            i_11860161 = addInt(i_11860161, 1);
          }
      } while(false);
    } while(false);
    result_11787197 = element_11787198;

  return result_11787197;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1214635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function parseSaturatedNatural_2490017(s_2490019, b_2490021, b_2490021_Idx, start_2490022) {
      var Tmp1;
          var Tmp4;

  var result_2490024 = 0;

    var i_2490025 = start_2490022;
    if (((i_2490025 < (s_2490019).length) && (s_2490019[chckIndx(i_2490025, 0, (s_2490019).length-1)] == 43))) {
    i_2490025 = addInt(i_2490025, 1);
    }
    
      if (!(i_2490025 < (s_2490019).length)) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_2490019[chckIndx(i_2490025, 0, (s_2490019).length-1)]] != undefined);      }    if (Tmp1) {
    b_2490021[b_2490021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_2490025 < (s_2490019).length)) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_2490019[chckIndx(i_2490025, 0, (s_2490019).length-1)]] != undefined);          }        if (!Tmp4) break L3;
          var c_2500016 = subInt(s_2490019[chckIndx(i_2490025, 0, (s_2490019).length-1)], 48);
          if ((b_2490021[b_2490021_Idx] <= divInt(subInt(2147483647, c_2500016), 10))) {
          b_2490021[b_2490021_Idx] = addInt(mulInt(b_2490021[b_2490021_Idx], 10), c_2500016);
          }
          else {
            b_2490021[b_2490021_Idx] = 2147483647;
          }
          
          i_2490025 = addInt(i_2490025, 1);
          L5: do {
              L6: while (true) {
              if (!((i_2490025 < (s_2490019).length) && (s_2490019[chckIndx(i_2490025, 0, (s_2490019).length-1)] == 95))) break L6;
                i_2490025 = addInt(i_2490025, 1);
              }
          } while(false);
        }
    } while(false);
    result_2490024 = subInt(i_2490025, start_2490022);
    }
    

  return result_2490024;

}
function HEX5BHEX5D_5900068(s_5900072, x_5900074) {
  var result_5900075 = [];

    var a_5900201 = x_5900074.a;
    var L_5900401 = addInt(subInt(subInt((s_5900072).length, x_5900074.b), a_5900201), 1);
    result_5900075 = nimCopy(null, mnewString(chckRange(L_5900401, 0, 2147483647)), NTI1208013);
    L1: do {
      var i_5900409 = 0;
      var i_11860192 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860192 < L_5900401)) break L3;
            i_5900409 = i_11860192;
            result_5900075[chckIndx(i_5900409, 0, (result_5900075).length-1)] = s_5900072[chckIndx(addInt(i_5900409, a_5900201), 0, (s_5900072).length-1)];
            i_11860192 = addInt(i_11860192, 1);
          }
      } while(false);
    } while(false);

  return result_5900075;

}
function parseStandardFormatSpecifier_11670322(s_11670324, start_11670325, ignoreUnknownSuffix_11670327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_11670328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_11670328.fill = 32;
    result_11670328.align = 0;
    result_11670328.sign = 45;
    var i_11670331 = start_11670325;
    if (((addInt(i_11670331, 1) < (s_11670324).length) && (ConstSet2[s_11670324[chckIndx(addInt(i_11670331, 1), 0, (s_11670324).length-1)]] != undefined))) {
    result_11670328.fill = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    result_11670328.align = s_11670324[chckIndx(addInt(i_11670331, 1), 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 2);
    }
    else {
    if (((i_11670331 < (s_11670324).length) && (ConstSet3[s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)]] != undefined))) {
    result_11670328.align = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 1);
    }
    }
    if (((i_11670331 < (s_11670324).length) && (ConstSet4[s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)]] != undefined))) {
    result_11670328.sign = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 1);
    }
    
    if (((i_11670331 < (s_11670324).length) && (s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)] == 35))) {
    result_11670328.alternateForm = true;
    i_11670331 = addInt(i_11670331, 1);
    }
    
      if (!((addInt(i_11670331, 1) < (s_11670324).length) && (s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_11670324[chckIndx(addInt(i_11670331, 1), 0, (s_11670324).length-1)]] != undefined);      }    if (Tmp1) {
    result_11670328.padWithZero = true;
    i_11670331 = addInt(i_11670331, 1);
    }
    
    var parsedLength_11690015 = parseSaturatedNatural_2490017(s_11670324, result_11670328, "minimumWidth", i_11670331);
    i_11670331 = addInt(i_11670331, parsedLength_11690015);
    if (((i_11670331 < (s_11670324).length) && (s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)] == 46))) {
    i_11670331 = addInt(i_11670331, 1);
    var parsedLengthB_11690029 = parseSaturatedNatural_2490017(s_11670324, result_11670328, "precision", i_11670331);
    i_11670331 = addInt(i_11670331, parsedLengthB_11690029);
    }
    else {
      result_11670328.precision = -1;
    }
    
      if (!(i_11670331 < (s_11670324).length)) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)]] != undefined);      }    if (Tmp2) {
    result_11670328.typ = s_11670324[chckIndx(i_11670331, 0, (s_11670324).length-1)];
    i_11670331 = addInt(i_11670331, 1);
    }
    
    result_11670328.endPosition = i_11670331;
      if (!!((i_11670331 == (s_11670324).length))) Tmp3 = false; else {        Tmp3 = !(ignoreUnknownSuffix_11670327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5900068(s_11670324, HEX2EHEX2E_5900001(i_11670331, 1)) || []), parent: null, m_type: NTI1214643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_11670328;

}
function nucruneLen(s_2572025) {
  var result_2572026 = 0;

    result_2572026 = 0;
    var i_2572028 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2572028 < (s_2572025).length)) break L2;
          if ((s_2572025[chckIndx(i_2572028, 0, (s_2572025).length-1)] <= 127)) {
          i_2572028 = addInt(i_2572028, 1);
          }
          else {
          if ((((s_2572025[chckIndx(i_2572028, 0, (s_2572025).length-1)] >>> 0) >>> 5) == 6)) {
          i_2572028 = addInt(i_2572028, 2);
          }
          else {
          if ((((s_2572025[chckIndx(i_2572028, 0, (s_2572025).length-1)] >>> 0) >>> 4) == 14)) {
          i_2572028 = addInt(i_2572028, 3);
          }
          else {
          if ((((s_2572025[chckIndx(i_2572028, 0, (s_2572025).length-1)] >>> 0) >>> 3) == 30)) {
          i_2572028 = addInt(i_2572028, 4);
          }
          else {
          if ((((s_2572025[chckIndx(i_2572028, 0, (s_2572025).length-1)] >>> 0) >>> 2) == 62)) {
          i_2572028 = addInt(i_2572028, 5);
          }
          else {
          if ((((s_2572025[chckIndx(i_2572028, 0, (s_2572025).length-1)] >>> 0) >>> 1) == 126)) {
          i_2572028 = addInt(i_2572028, 6);
          }
          else {
          i_2572028 = addInt(i_2572028, 1);
          }
          }}}}}
          result_2572026 = addInt(result_2572026, 1);
        }
    } while(false);

  return result_2572026;

}
function runeLenAt_2572127(s_2572129, i_2572130) {
  var result_2572131 = 0;

    if ((s_2572129[chckIndx(i_2572130, 0, (s_2572129).length-1)] <= 127)) {
    result_2572131 = 1;
    }
    else {
    if ((((s_2572129[chckIndx(i_2572130, 0, (s_2572129).length-1)] >>> 0) >>> 5) == 6)) {
    result_2572131 = 2;
    }
    else {
    if ((((s_2572129[chckIndx(i_2572130, 0, (s_2572129).length-1)] >>> 0) >>> 4) == 14)) {
    result_2572131 = 3;
    }
    else {
    if ((((s_2572129[chckIndx(i_2572130, 0, (s_2572129).length-1)] >>> 0) >>> 3) == 30)) {
    result_2572131 = 4;
    }
    else {
    if ((((s_2572129[chckIndx(i_2572130, 0, (s_2572129).length-1)] >>> 0) >>> 2) == 62)) {
    result_2572131 = 5;
    }
    else {
    if ((((s_2572129[chckIndx(i_2572130, 0, (s_2572129).length-1)] >>> 0) >>> 1) == 126)) {
    result_2572131 = 6;
    }
    else {
      result_2572131 = 1;
    }
    }}}}}

  return result_2572131;

}
function runeOffset_3195259(s_3195261, pos_3195262, start_3195263) {
  var result_3195264 = 0;

  BeforeRet: do {
    var i_3195266 = 0;
    var o_3195267 = start_3195263;
    L1: do {
        L2: while (true) {
        if (!(i_3195266 < pos_3195262)) break L2;
          o_3195267 = addInt(o_3195267, chckRange(runeLenAt_2572127(s_3195261, o_3195267), 0, 2147483647));
          if (((s_3195261).length <= o_3195267)) {
          result_3195264 = -1;
          break BeforeRet;
          }
          
          i_3195266 = addInt(i_3195266, 1);
        }
    } while(false);
    result_3195264 = o_3195267;
    break BeforeRet;
  } while (false);

  return result_3195264;

}
function validateUtf8_2815244(s_2815246) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2815247 = 0;

  BeforeRet: do {
    var i_2815249 = 0;
    var L_2815250 = (s_2815246).length;
    L1: do {
        L2: while (true) {
        if (!(i_2815249 < L_2815250)) break L2;
          if ((s_2815246[chckIndx(i_2815249, 0, (s_2815246).length-1)] <= 127)) {
          i_2815249 = addInt(i_2815249, 1);
          }
          else {
          if ((((s_2815246[chckIndx(i_2815249, 0, (s_2815246).length-1)] >>> 0) >>> 5) == 6)) {
          if ((s_2815246[chckIndx(i_2815249, 0, (s_2815246).length-1)] < 194)) {
          result_2815247 = i_2815249;
          break BeforeRet;
          }
          
            if (!(addInt(i_2815249, 1) < L_2815250)) Tmp3 = false; else {              Tmp3 = (((s_2815246[chckIndx(addInt(i_2815249, 1), 0, (s_2815246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_2815249 = addInt(i_2815249, 2);
          }
          else {
            result_2815247 = i_2815249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2815246[chckIndx(i_2815249, 0, (s_2815246).length-1)] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2815249, 2) < L_2815250)) Tmp5 = false; else {              Tmp5 = (((s_2815246[chckIndx(addInt(i_2815249, 1), 0, (s_2815246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2815246[chckIndx(addInt(i_2815249, 2), 0, (s_2815246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_2815249 = addInt(i_2815249, 3);
          }
          else {
            result_2815247 = i_2815249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2815246[chckIndx(i_2815249, 0, (s_2815246).length-1)] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2815249, 3) < L_2815250)) Tmp8 = false; else {              Tmp8 = (((s_2815246[chckIndx(addInt(i_2815249, 1), 0, (s_2815246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2815246[chckIndx(addInt(i_2815249, 2), 0, (s_2815246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2815246[chckIndx(addInt(i_2815249, 3), 0, (s_2815246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_2815249 = addInt(i_2815249, 4);
          }
          else {
            result_2815247 = i_2815249;
            break BeforeRet;
          }
          
          }
          else {
            result_2815247 = i_2815249;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_2815247 = -1;
    break BeforeRet;
  } while (false);

  return result_2815247;

}
function nsuRepeatChar(c_9950124, count_9950125) {
  var result_9950126 = [];

    result_9950126 = nimCopy(null, mnewString(count_9950125), NTI1208013);
    L1: do {
      var i_9950135 = 0;
      var colontmp__11860221 = 0;
      colontmp__11860221 = subInt(count_9950125, 1);
      var res_11860222 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11860222 <= colontmp__11860221)) break L3;
            i_9950135 = res_11860222;
            result_9950126[chckIndx(i_9950135, 0, (result_9950126).length-1)] = c_9950124;
            res_11860222 = addInt(res_11860222, 1);
          }
      } while(false);
    } while(false);

  return result_9950126;

}
function alignString_11670222(s_11670224, minimumWidth_11670225, align_11670226, fill_11670227) {
      var Tmp1;

  var result_11670228 = [];

    if ((minimumWidth_11670225 == 0)) {
    result_11670228 = nimCopy(null, s_11670224, NTI1208013);
    }
    else {
      if ((validateUtf8_2815244(s_11670224) == -1)) {
      Tmp1 = nucruneLen(s_11670224);
      }
      else {
      Tmp1 = (s_11670224).length;
      }
      
      var sRuneLen_11670229 = Tmp1;
      var toFill_11670230 = subInt(minimumWidth_11670225, sRuneLen_11670229);
      if ((toFill_11670230 <= 0)) {
      result_11670228 = nimCopy(null, s_11670224, NTI1208013);
      }
      else {
      if (((align_11670226 == 60) || (align_11670226 == 0))) {
      result_11670228 = nimCopy(null, (s_11670224 || []).concat(nsuRepeatChar(fill_11670227, chckRange(toFill_11670230, 0, 2147483647)) || []), NTI1208013);
      }
      else {
      if ((align_11670226 == 94)) {
      var half_11670231 = divInt(toFill_11670230, 2);
      result_11670228 = nimCopy(null, (nsuRepeatChar(fill_11670227, chckRange(half_11670231, 0, 2147483647)) || []).concat(s_11670224 || [],nsuRepeatChar(fill_11670227, chckRange(subInt(toFill_11670230, half_11670231), 0, 2147483647)) || []), NTI1208013);
      }
      else {
        result_11670228 = nimCopy(null, (nsuRepeatChar(fill_11670227, chckRange(toFill_11670230, 0, 2147483647)) || []).concat(s_11670224 || []), NTI1208013);
      }
      }}
    }
    

  return result_11670228;

}
function formatValue_11715080(result_11715083, result_11715083_Idx, value_11715084, specifier_11715085) {
    var spec_11715086 = parseStandardFormatSpecifier_11670322(specifier_11715085, 0, false);
    var value_11715087 = nimCopy(null, value_11715084, NTI1208013);
    switch (spec_11715086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_11715086.typ]), parent: null, m_type: NTI1214643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_11715086.precision == -1))) {
    if ((spec_11715086.precision < nucruneLen(value_11715087))) {
    (value_11715087.length = chckRange(runeOffset_3195259(value_11715087, chckRange(spec_11715086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_11715083[result_11715083_Idx].push.apply(result_11715083[result_11715083_Idx], alignString_11670222(value_11715087, spec_11715086.minimumWidth, spec_11715086.align, spec_11715086.fill));;

  
}
function insert_11787126(parent_11787128, elements_11787130) {
    L1: do {
      var element_11787163 = null;
      var element_11787163_Idx = 0;
      var i_11860229 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860229 < (elements_11787130).length)) break L3;
            element_11787163 = elements_11787130; element_11787163_Idx = chckIndx(i_11860229, 0, (elements_11787130).length-1);
            parent_11787128.appendChild(element_11787163[element_11787163_Idx]);
            i_11860229 = addInt(i_11860229, 1);
          }
      } while(false);
    } while(false);

  
}
function HEX5BHEX5D_11830022(s_11830028, x_11830030) {
  var result_11830032 = [];

    var a_11830201 = x_11830030.a;
    var L_11830405 = addInt(subInt(subInt((s_11830028).length, x_11830030.b), a_11830201), 1);
    result_11830032 = new Array(chckRange(L_11830405, 0, 2147483647)); for (var i=0;i<chckRange(L_11830405, 0, 2147483647);++i) {result_11830032[i]=[];}    L1: do {
      var i_11830420 = 0;
      var i_11860234 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11860234 < L_11830405)) break L3;
            i_11830420 = i_11860234;
            result_11830032[chckIndx(i_11830420, 0, (result_11830032).length-1)] = nimCopy(null, s_11830028[chckIndx(addInt(i_11830420, a_11830201), 0, (s_11830028).length-1)], NTI1208013);
            i_11860234 = addInt(i_11860234, 1);
          }
      } while(false);
    } while(false);

  return result_11830032;

}
function stackHeaders_11815054(headerBoard_11815056, headerColors_11815058) {
    var firstColor_11815059 = nimCopy(null, headerColors_11815058[chckIndx(0, 0, (headerColors_11815058).length-1)], NTI1208013);
    var fmtRes_11815065 = [mnewString(0)];
    fmtRes_11815065[0].push.apply(fmtRes_11815065[0], makeNimstrLit("id="));;
    formatValue_11715080(fmtRes_11815065, 0, firstColor_11815059, []);
    var firstHeader_11820002 = make_11787192(makeNimstrLit("h1"), [makeNimstrLit("class=header"), nimCopy(null, fmtRes_11815065[0], NTI1208013), makeNimstrLit("text=GRABATILE")]);
    firstHeader_11820002.style.backgroundColor = toJSStr(firstColor_11815059);
    insert_11787126(headerBoard_11815056, [firstHeader_11820002]);
    L1: do {
      var color_11840214 = null;
      var color_11840214_Idx = 0;
      var colontmp__11860155 = [];
      colontmp__11860155 = HEX5BHEX5D_11830022(headerColors_11815058, HEX2EHEX2E_5900001(1, 1));
      var i_11860157 = 0;
      var L_11860158 = (colontmp__11860155).length;
      L2: do {
          L3: while (true) {
          if (!(i_11860157 < L_11860158)) break L3;
            color_11840214 = colontmp__11860155; color_11840214_Idx = chckIndx(i_11860157, 0, (colontmp__11860155).length-1);
            var fmtRes_11840217 = [mnewString(0)];
            fmtRes_11840217[0].push.apply(fmtRes_11840217[0], makeNimstrLit("id="));;
            formatValue_11715080(fmtRes_11840217, 0, color_11840214[color_11840214_Idx], []);
            var header_11845002 = make_11787192(makeNimstrLit("h1"), [makeNimstrLit("class=header"), nimCopy(null, fmtRes_11840217[0], NTI1208013), makeNimstrLit("text=GRABATILE")]);
            header_11845002.style.visibility = "hidden";
            header_11845002.style.backgroundColor = toJSStr(color_11840214[color_11840214_Idx]);
            insert_11787126(headerBoard_11815056, [header_11845002]);
            i_11860157 = addInt(i_11860157, 1);
            if (!(((colontmp__11860155).length == L_11860158))) {
            failedAssertImpl_1325480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    var lastHeader_11845007 = make_11787192(makeNimstrLit("h1"), [makeNimstrLit("class=header"), makeNimstrLit("text=GRABATILE")]);
    lastHeader_11845007.style.visibility = "hidden";
    lastHeader_11845007.style.color = "#bebebe";
    insert_11787126(headerBoard_11815056, [lastHeader_11845007]);

  
}
function playNextColor_11789014(nextColor_11789016) {
    L1: do {
      var color_11789077 = ({name: [], hex: []});
      var i_11860245 = 0;
      if ((i_11860245 <= 10)) {
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            nimCopy(color_11789077, COLORS_11788026[chckIndx(i_11860245, 0, (COLORS_11788026).length-1)], NTI11788003);
            if ((toJSStr(color_11789077.hex) == nextColor_11789016)) {
            getAudio_11787220(color_11789077.name).play();
            }
            
            if ((10 <= i_11860245)) {
            break L2;
            }
            
            i_11860245 = addInt(i_11860245, 1);
          }
      } while(false);
      }
      
    } while(false);

  
}
function action_11789092(tile_11789094, headerBoard_11789095) {
    var currentHeader_11789096 = headerBoard_11789095.children[chckIndx(0, 0, (headerBoard_11789095.children).length-1)];
    var currentColor_11789097 = currentHeader_11789096.id;
    if ((currentColor_11789097 == tile_11789094.id)) {
    tile_11789094.style.visibility = "hidden";
    getAudio_11787220(makeNimstrLit("grab")).play();
    headerBoard_11789095.removeChild(currentHeader_11789096);
    var nextHeader_11789098 = headerBoard_11789095.children[chckIndx(0, 0, (headerBoard_11789095.children).length-1)];
    var nextColor_11789099 = nextHeader_11789098.id;
    nextHeader_11789098.style.visibility = "visible";
    if (!((nextColor_11789099 == currentColor_11789097))) {
    playNextColor_11789014(nextColor_11789099);
    }
    
    }
    else {
    getAudio_11787220(makeNimstrLit("fail")).play();
    }
    

  
}
function fillTileMap_11845083(tileMap_11845085, headerBoard_11845086, tileColors_11845088) {
            function HEX3Aanonymous_11850001() {
                function HEX3Aanonymous_11860002(__11860004) {
                    action_11789092(tile_11855002, headerBoard_11845086);

                  
                }

                var fmtRes_11850005 = [mnewString(0)];
                fmtRes_11850005[0].push.apply(fmtRes_11850005[0], makeNimstrLit("id="));;
                formatValue_11715080(fmtRes_11850005, 0, color_11845096.hex, []);
                var tile_11855002 = make_11787192(makeNimstrLit("div"), [makeNimstrLit("class=tile"), nimCopy(null, fmtRes_11850005[0], NTI1208013)]);
                var fmtRes_11855003 = [mnewString(0)];
                fmtRes_11855003[0].push.apply(fmtRes_11855003[0], makeNimstrLit("url(\"images/tiles/"));;
                formatValue_11715080(fmtRes_11855003, 0, color_11845096.name, []);
                fmtRes_11855003[0].push.apply(fmtRes_11855003[0], makeNimstrLit("_tile.png\")"));;
                tile_11855002.style.backgroundImage = toJSStr(fmtRes_11855003[0]);
                tile_11855002.onclick = HEX3Aanonymous_11860002;
                insert_11787126(tileMap_11845085, [tile_11855002]);

              
            }

    L1: do {
      var color_11845096 = null;
      var i_11860237 = 0;
      var L_11860238 = (tileColors_11845088).length;
      L2: do {
          L3: while (true) {
          if (!(i_11860237 < L_11860238)) break L3;
            color_11845096 = tileColors_11845088[chckIndx(i_11860237, 0, (tileColors_11845088).length-1)];
            HEX3Aanonymous_11850001();
            i_11860237 = addInt(i_11860237, 1);
            if (!(((tileColors_11845088).length == L_11860238))) {
            failedAssertImpl_1325480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  
}
function startButton() {
    getAudio_11787220(makeNimstrLit("music")).play();
    var tileMap_11860064 = getId_11787046(makeNimstrLit("tileMap"));
    var headerBoard_11860065 = getId_11787046(makeNimstrLit("headerBoard"));
    tileMap_11860064.innerHTML = "";
    headerBoard_11860065.innerHTML = "";
    var tileColors_11860066 = sampleTileColors_11790014();
    var headerColors_11860067 = sortByNextOccurence_11790277(tileColors_11860066);
    stackHeaders_11815054(headerBoard_11860065, headerColors_11860067);
    fillTileMap_11845083(tileMap_11860064, headerBoard_11860065, tileColors_11860066);
    playNextColor_11789014(headerBoard_11860065.children[chckIndx(0, 0, (headerBoard_11860065.children).length-1)].id);

  
}
